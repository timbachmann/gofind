/**
 * Cineast RESTful API
 * Cineast is vitrivr's content-based multimedia retrieval engine. This is it's RESTful API.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@vitrivr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.FeaturesAllCategoriesQueryResult;
import org.openapitools.client.model.FeaturesTextCategoryQueryResult;
import org.openapitools.client.model.IdList;
import org.openapitools.client.model.MediaObjectMetadataQueryResult;
import org.openapitools.client.model.MediaSegmentMetadataQueryResult;
import org.openapitools.client.model.OptionallyFilteredIdList;
import org.openapitools.client.model.TagIDsForElementQueryResult;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class MetadataApi {
  String basePath = "http://city-stories.dmi.unibas.ch:5555";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Find metadata for the given object id
  * Find metadata by the given object id
   * @param id The object id to find metadata of
   * @return MediaObjectMetadataQueryResult
  */
  public MediaObjectMetadataQueryResult findMetaById (String id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling findMetaById",
        new ApiException(400, "Missing the required parameter 'id' when calling findMetaById"));
    }

    // create path and map variables
    String path = "/api/v1/find/metadata/by/id/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MediaObjectMetadataQueryResult) ApiInvoker.deserialize(localVarResponse, "", MediaObjectMetadataQueryResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Find metadata for the given object id
   * Find metadata by the given object id
   * @param id The object id to find metadata of
  */
  public void findMetaById (String id, final Response.Listener<MediaObjectMetadataQueryResult> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling findMetaById",
        new ApiException(400, "Missing the required parameter 'id' when calling findMetaById"));
    }

    // create path and map variables
    String path = "/api/v1/find/metadata/by/id/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MediaObjectMetadataQueryResult) ApiInvoker.deserialize(localVarResponse,  "", MediaObjectMetadataQueryResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Find metadata for specific object id in given domain with given key
  * The description
   * @param id The object id
   * @param domain The domain name
   * @param key Metadata key
   * @return MediaObjectMetadataQueryResult
  */
  public MediaObjectMetadataQueryResult findMetaFullyQualified (String id, String domain, String key) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling findMetaFullyQualified",
        new ApiException(400, "Missing the required parameter 'id' when calling findMetaFullyQualified"));
    }
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling findMetaFullyQualified",
        new ApiException(400, "Missing the required parameter 'domain' when calling findMetaFullyQualified"));
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'key' when calling findMetaFullyQualified",
        new ApiException(400, "Missing the required parameter 'key' when calling findMetaFullyQualified"));
    }

    // create path and map variables
    String path = "/api/v1/find/metadata/of/{id}/in/{domain}/with/{key}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString())).replaceAll("\\{" + "key" + "\\}", apiInvoker.escapeString(key.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MediaObjectMetadataQueryResult) ApiInvoker.deserialize(localVarResponse, "", MediaObjectMetadataQueryResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Find metadata for specific object id in given domain with given key
   * The description
   * @param id The object id   * @param domain The domain name   * @param key Metadata key
  */
  public void findMetaFullyQualified (String id, String domain, String key, final Response.Listener<MediaObjectMetadataQueryResult> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling findMetaFullyQualified",
        new ApiException(400, "Missing the required parameter 'id' when calling findMetaFullyQualified"));
    }
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling findMetaFullyQualified",
        new ApiException(400, "Missing the required parameter 'domain' when calling findMetaFullyQualified"));
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'key' when calling findMetaFullyQualified",
        new ApiException(400, "Missing the required parameter 'key' when calling findMetaFullyQualified"));
    }

    // create path and map variables
    String path = "/api/v1/find/metadata/of/{id}/in/{domain}/with/{key}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString())).replaceAll("\\{" + "key" + "\\}", apiInvoker.escapeString(key.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MediaObjectMetadataQueryResult) ApiInvoker.deserialize(localVarResponse,  "", MediaObjectMetadataQueryResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Find metadata for specific object id in given domain
  * Find metadata for specific object id in given domain
   * @param domain The domain of the metadata to find
   * @param id The object id of the multimedia object to find metadata for
   * @return MediaObjectMetadataQueryResult
  */
  public MediaObjectMetadataQueryResult findMetadataByDomain (String domain, String id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling findMetadataByDomain",
        new ApiException(400, "Missing the required parameter 'domain' when calling findMetadataByDomain"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling findMetadataByDomain",
        new ApiException(400, "Missing the required parameter 'id' when calling findMetadataByDomain"));
    }

    // create path and map variables
    String path = "/api/v1/find/metadata/in/{domain}/by/id/{domain}".replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MediaObjectMetadataQueryResult) ApiInvoker.deserialize(localVarResponse, "", MediaObjectMetadataQueryResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Find metadata for specific object id in given domain
   * Find metadata for specific object id in given domain
   * @param domain The domain of the metadata to find   * @param id The object id of the multimedia object to find metadata for
  */
  public void findMetadataByDomain (String domain, String id, final Response.Listener<MediaObjectMetadataQueryResult> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling findMetadataByDomain",
        new ApiException(400, "Missing the required parameter 'domain' when calling findMetadataByDomain"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling findMetadataByDomain",
        new ApiException(400, "Missing the required parameter 'id' when calling findMetadataByDomain"));
    }

    // create path and map variables
    String path = "/api/v1/find/metadata/in/{domain}/by/id/{domain}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MediaObjectMetadataQueryResult) ApiInvoker.deserialize(localVarResponse,  "", MediaObjectMetadataQueryResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Find metadata in the specified domain for all the given ids
  * Find metadata in the specified domain for all the given ids
   * @param domain The domain of the metadata to find
   * @param idList 
   * @return MediaObjectMetadataQueryResult
  */
  public MediaObjectMetadataQueryResult findMetadataByDomainBatched (String domain, IdList idList) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = idList;
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling findMetadataByDomainBatched",
        new ApiException(400, "Missing the required parameter 'domain' when calling findMetadataByDomainBatched"));
    }

    // create path and map variables
    String path = "/api/v1/find/metadata/in/{domain}".replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MediaObjectMetadataQueryResult) ApiInvoker.deserialize(localVarResponse, "", MediaObjectMetadataQueryResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Find metadata in the specified domain for all the given ids
   * Find metadata in the specified domain for all the given ids
   * @param domain The domain of the metadata to find   * @param idList 
  */
  public void findMetadataByDomainBatched (String domain, IdList idList, final Response.Listener<MediaObjectMetadataQueryResult> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = idList;

    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling findMetadataByDomainBatched",
        new ApiException(400, "Missing the required parameter 'domain' when calling findMetadataByDomainBatched"));
    }

    // create path and map variables
    String path = "/api/v1/find/metadata/in/{domain}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MediaObjectMetadataQueryResult) ApiInvoker.deserialize(localVarResponse,  "", MediaObjectMetadataQueryResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Find metadata for a given object id with specified key
  * Find metadata for a given object id with specified key
   * @param key The key of the metadata to find
   * @param id The object id of for which the metadata should be find
   * @return MediaObjectMetadataQueryResult
  */
  public MediaObjectMetadataQueryResult findMetadataByKey (String key, String id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'key' is set
    if (key == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'key' when calling findMetadataByKey",
        new ApiException(400, "Missing the required parameter 'key' when calling findMetadataByKey"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling findMetadataByKey",
        new ApiException(400, "Missing the required parameter 'id' when calling findMetadataByKey"));
    }

    // create path and map variables
    String path = "/api/v1/find/metadata/with/{key}/by/id/{id}".replaceAll("\\{" + "key" + "\\}", apiInvoker.escapeString(key.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MediaObjectMetadataQueryResult) ApiInvoker.deserialize(localVarResponse, "", MediaObjectMetadataQueryResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Find metadata for a given object id with specified key
   * Find metadata for a given object id with specified key
   * @param key The key of the metadata to find   * @param id The object id of for which the metadata should be find
  */
  public void findMetadataByKey (String key, String id, final Response.Listener<MediaObjectMetadataQueryResult> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'key' is set
    if (key == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'key' when calling findMetadataByKey",
        new ApiException(400, "Missing the required parameter 'key' when calling findMetadataByKey"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling findMetadataByKey",
        new ApiException(400, "Missing the required parameter 'id' when calling findMetadataByKey"));
    }

    // create path and map variables
    String path = "/api/v1/find/metadata/with/{key}/by/id/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "key" + "\\}", apiInvoker.escapeString(key.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MediaObjectMetadataQueryResult) ApiInvoker.deserialize(localVarResponse,  "", MediaObjectMetadataQueryResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Find metadata for a given object id with specified key
  * Find metadata with a the speicifed key from the path across all domains and for the provided ids
   * @param key The key of the metadata to find
   * @param idList 
   * @return MediaObjectMetadataQueryResult
  */
  public MediaObjectMetadataQueryResult findMetadataByKeyBatched (String key, IdList idList) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = idList;
    // verify the required parameter 'key' is set
    if (key == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'key' when calling findMetadataByKeyBatched",
        new ApiException(400, "Missing the required parameter 'key' when calling findMetadataByKeyBatched"));
    }

    // create path and map variables
    String path = "/api/v1/find/metadata/with/{key}".replaceAll("\\{" + "key" + "\\}", apiInvoker.escapeString(key.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MediaObjectMetadataQueryResult) ApiInvoker.deserialize(localVarResponse, "", MediaObjectMetadataQueryResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Find metadata for a given object id with specified key
   * Find metadata with a the speicifed key from the path across all domains and for the provided ids
   * @param key The key of the metadata to find   * @param idList 
  */
  public void findMetadataByKeyBatched (String key, IdList idList, final Response.Listener<MediaObjectMetadataQueryResult> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = idList;

    // verify the required parameter 'key' is set
    if (key == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'key' when calling findMetadataByKeyBatched",
        new ApiException(400, "Missing the required parameter 'key' when calling findMetadataByKeyBatched"));
    }

    // create path and map variables
    String path = "/api/v1/find/metadata/with/{key}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "key" + "\\}", apiInvoker.escapeString(key.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MediaObjectMetadataQueryResult) ApiInvoker.deserialize(localVarResponse,  "", MediaObjectMetadataQueryResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Finds metadata for the given list of object ids
  * Finds metadata for the given list of object ids
   * @param optionallyFilteredIdList 
   * @return MediaObjectMetadataQueryResult
  */
  public MediaObjectMetadataQueryResult findMetadataForObjectIdBatched (OptionallyFilteredIdList optionallyFilteredIdList) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = optionallyFilteredIdList;

    // create path and map variables
    String path = "/api/v1/find/metadata/by/id";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MediaObjectMetadataQueryResult) ApiInvoker.deserialize(localVarResponse, "", MediaObjectMetadataQueryResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Finds metadata for the given list of object ids
   * Finds metadata for the given list of object ids
   * @param optionallyFilteredIdList 
  */
  public void findMetadataForObjectIdBatched (OptionallyFilteredIdList optionallyFilteredIdList, final Response.Listener<MediaObjectMetadataQueryResult> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = optionallyFilteredIdList;


    // create path and map variables
    String path = "/api/v1/find/metadata/by/id".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MediaObjectMetadataQueryResult) ApiInvoker.deserialize(localVarResponse,  "", MediaObjectMetadataQueryResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Find features for the given id
  * Find features by the given id
   * @param id The id to find features of
   * @return FeaturesAllCategoriesQueryResult
  */
  public FeaturesAllCategoriesQueryResult findSegFeatById (String id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling findSegFeatById",
        new ApiException(400, "Missing the required parameter 'id' when calling findSegFeatById"));
    }

    // create path and map variables
    String path = "/api/v1/find/feature/all/by/id/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (FeaturesAllCategoriesQueryResult) ApiInvoker.deserialize(localVarResponse, "", FeaturesAllCategoriesQueryResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Find features for the given id
   * Find features by the given id
   * @param id The id to find features of
  */
  public void findSegFeatById (String id, final Response.Listener<FeaturesAllCategoriesQueryResult> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling findSegFeatById",
        new ApiException(400, "Missing the required parameter 'id' when calling findSegFeatById"));
    }

    // create path and map variables
    String path = "/api/v1/find/feature/all/by/id/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((FeaturesAllCategoriesQueryResult) ApiInvoker.deserialize(localVarResponse,  "", FeaturesAllCategoriesQueryResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Find metadata for the given segment id
  * Find metadata by the given segment id
   * @param id The segment id to find metadata of
   * @return MediaSegmentMetadataQueryResult
  */
  public MediaSegmentMetadataQueryResult findSegMetaById (String id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling findSegMetaById",
        new ApiException(400, "Missing the required parameter 'id' when calling findSegMetaById"));
    }

    // create path and map variables
    String path = "/api/v1/find/metadata/by/segmentid/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MediaSegmentMetadataQueryResult) ApiInvoker.deserialize(localVarResponse, "", MediaSegmentMetadataQueryResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Find metadata for the given segment id
   * Find metadata by the given segment id
   * @param id The segment id to find metadata of
  */
  public void findSegMetaById (String id, final Response.Listener<MediaSegmentMetadataQueryResult> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling findSegMetaById",
        new ApiException(400, "Missing the required parameter 'id' when calling findSegMetaById"));
    }

    // create path and map variables
    String path = "/api/v1/find/metadata/by/segmentid/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MediaSegmentMetadataQueryResult) ApiInvoker.deserialize(localVarResponse,  "", MediaSegmentMetadataQueryResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Find tag ids for the given id
  * Find tag ids for the given id
   * @param id The id to find tagids of
   * @return TagIDsForElementQueryResult
  */
  public TagIDsForElementQueryResult findTagsByIdId (String id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling findTagsByIdId",
        new ApiException(400, "Missing the required parameter 'id' when calling findTagsByIdId"));
    }

    // create path and map variables
    String path = "/api/v1/find/feature/tags/by/id/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TagIDsForElementQueryResult) ApiInvoker.deserialize(localVarResponse, "", TagIDsForElementQueryResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Find tag ids for the given id
   * Find tag ids for the given id
   * @param id The id to find tagids of
  */
  public void findTagsByIdId (String id, final Response.Listener<TagIDsForElementQueryResult> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling findTagsByIdId",
        new ApiException(400, "Missing the required parameter 'id' when calling findTagsByIdId"));
    }

    // create path and map variables
    String path = "/api/v1/find/feature/tags/by/id/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TagIDsForElementQueryResult) ApiInvoker.deserialize(localVarResponse,  "", TagIDsForElementQueryResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Find Text for the given id and retrieval category
  * Find Text by the given id and retrieval category
   * @param id The id to find text of
   * @param category The category for which retrieval shall be performed
   * @return FeaturesTextCategoryQueryResult
  */
  public FeaturesTextCategoryQueryResult findTextByIDAndCat (String id, String category) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling findTextByIDAndCat",
        new ApiException(400, "Missing the required parameter 'id' when calling findTextByIDAndCat"));
    }
    // verify the required parameter 'category' is set
    if (category == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'category' when calling findTextByIDAndCat",
        new ApiException(400, "Missing the required parameter 'category' when calling findTextByIDAndCat"));
    }

    // create path and map variables
    String path = "/api/v1/find/feature/text/by/{id}/{category}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "category" + "\\}", apiInvoker.escapeString(category.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (FeaturesTextCategoryQueryResult) ApiInvoker.deserialize(localVarResponse, "", FeaturesTextCategoryQueryResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Find Text for the given id and retrieval category
   * Find Text by the given id and retrieval category
   * @param id The id to find text of   * @param category The category for which retrieval shall be performed
  */
  public void findTextByIDAndCat (String id, String category, final Response.Listener<FeaturesTextCategoryQueryResult> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling findTextByIDAndCat",
        new ApiException(400, "Missing the required parameter 'id' when calling findTextByIDAndCat"));
    }
    // verify the required parameter 'category' is set
    if (category == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'category' when calling findTextByIDAndCat",
        new ApiException(400, "Missing the required parameter 'category' when calling findTextByIDAndCat"));
    }

    // create path and map variables
    String path = "/api/v1/find/feature/text/by/{id}/{category}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "category" + "\\}", apiInvoker.escapeString(category.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((FeaturesTextCategoryQueryResult) ApiInvoker.deserialize(localVarResponse,  "", FeaturesTextCategoryQueryResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
