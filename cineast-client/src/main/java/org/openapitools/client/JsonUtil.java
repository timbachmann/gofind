/**
 * Cineast RESTful API
 * Cineast is vitrivr's content-based multimedia retrieval engine. This is it's RESTful API.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@vitrivr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import org.openapitools.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AbstractMetadataFilterDescriptor".equalsIgnoreCase(className)) {
      return new TypeToken<List<AbstractMetadataFilterDescriptor>>(){}.getType();
    }
    
    if ("ColumnSpecification".equalsIgnoreCase(className)) {
      return new TypeToken<List<ColumnSpecification>>(){}.getType();
    }
    
    if ("Credentials".equalsIgnoreCase(className)) {
      return new TypeToken<List<Credentials>>(){}.getType();
    }
    
    if ("DistinctElementsResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<DistinctElementsResult>>(){}.getType();
    }
    
    if ("ExtractionContainerMessage".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExtractionContainerMessage>>(){}.getType();
    }
    
    if ("ExtractionItemContainer".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExtractionItemContainer>>(){}.getType();
    }
    
    if ("FeaturesAllCategoriesQueryResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<FeaturesAllCategoriesQueryResult>>(){}.getType();
    }
    
    if ("FeaturesTextCategoryQueryResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<FeaturesTextCategoryQueryResult>>(){}.getType();
    }
    
    if ("IdList".equalsIgnoreCase(className)) {
      return new TypeToken<List<IdList>>(){}.getType();
    }
    
    if ("MediaObjectDescriptor".equalsIgnoreCase(className)) {
      return new TypeToken<List<MediaObjectDescriptor>>(){}.getType();
    }
    
    if ("MediaObjectMetadataDescriptor".equalsIgnoreCase(className)) {
      return new TypeToken<List<MediaObjectMetadataDescriptor>>(){}.getType();
    }
    
    if ("MediaObjectMetadataQueryResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<MediaObjectMetadataQueryResult>>(){}.getType();
    }
    
    if ("MediaObjectQueryResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<MediaObjectQueryResult>>(){}.getType();
    }
    
    if ("MediaSegmentDescriptor".equalsIgnoreCase(className)) {
      return new TypeToken<List<MediaSegmentDescriptor>>(){}.getType();
    }
    
    if ("MediaSegmentMetadataDescriptor".equalsIgnoreCase(className)) {
      return new TypeToken<List<MediaSegmentMetadataDescriptor>>(){}.getType();
    }
    
    if ("MediaSegmentMetadataQueryResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<MediaSegmentMetadataQueryResult>>(){}.getType();
    }
    
    if ("MediaSegmentQueryResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<MediaSegmentQueryResult>>(){}.getType();
    }
    
    if ("MetadataDomainFilter".equalsIgnoreCase(className)) {
      return new TypeToken<List<MetadataDomainFilter>>(){}.getType();
    }
    
    if ("MetadataKeyFilter".equalsIgnoreCase(className)) {
      return new TypeToken<List<MetadataKeyFilter>>(){}.getType();
    }
    
    if ("OptionallyFilteredIdList".equalsIgnoreCase(className)) {
      return new TypeToken<List<OptionallyFilteredIdList>>(){}.getType();
    }
    
    if ("Ping".equalsIgnoreCase(className)) {
      return new TypeToken<List<Ping>>(){}.getType();
    }
    
    if ("QueryComponent".equalsIgnoreCase(className)) {
      return new TypeToken<List<QueryComponent>>(){}.getType();
    }
    
    if ("QueryConfig".equalsIgnoreCase(className)) {
      return new TypeToken<List<QueryConfig>>(){}.getType();
    }
    
    if ("QueryTerm".equalsIgnoreCase(className)) {
      return new TypeToken<List<QueryTerm>>(){}.getType();
    }
    
    if ("SelectResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<SelectResult>>(){}.getType();
    }
    
    if ("SelectSpecification".equalsIgnoreCase(className)) {
      return new TypeToken<List<SelectSpecification>>(){}.getType();
    }
    
    if ("SessionState".equalsIgnoreCase(className)) {
      return new TypeToken<List<SessionState>>(){}.getType();
    }
    
    if ("SimilarityQuery".equalsIgnoreCase(className)) {
      return new TypeToken<List<SimilarityQuery>>(){}.getType();
    }
    
    if ("SimilarityQueryResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<SimilarityQueryResult>>(){}.getType();
    }
    
    if ("SimilarityQueryResultBatch".equalsIgnoreCase(className)) {
      return new TypeToken<List<SimilarityQueryResultBatch>>(){}.getType();
    }
    
    if ("StartSessionMessage".equalsIgnoreCase(className)) {
      return new TypeToken<List<StartSessionMessage>>(){}.getType();
    }
    
    if ("StringDoublePair".equalsIgnoreCase(className)) {
      return new TypeToken<List<StringDoublePair>>(){}.getType();
    }
    
    if ("Tag".equalsIgnoreCase(className)) {
      return new TypeToken<List<Tag>>(){}.getType();
    }
    
    if ("TagIDsForElementQueryResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<TagIDsForElementQueryResult>>(){}.getType();
    }
    
    if ("TagsQueryResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<TagsQueryResult>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AbstractMetadataFilterDescriptor".equalsIgnoreCase(className)) {
      return new TypeToken<AbstractMetadataFilterDescriptor>(){}.getType();
    }
    
    if ("ColumnSpecification".equalsIgnoreCase(className)) {
      return new TypeToken<ColumnSpecification>(){}.getType();
    }
    
    if ("Credentials".equalsIgnoreCase(className)) {
      return new TypeToken<Credentials>(){}.getType();
    }
    
    if ("DistinctElementsResult".equalsIgnoreCase(className)) {
      return new TypeToken<DistinctElementsResult>(){}.getType();
    }
    
    if ("ExtractionContainerMessage".equalsIgnoreCase(className)) {
      return new TypeToken<ExtractionContainerMessage>(){}.getType();
    }
    
    if ("ExtractionItemContainer".equalsIgnoreCase(className)) {
      return new TypeToken<ExtractionItemContainer>(){}.getType();
    }
    
    if ("FeaturesAllCategoriesQueryResult".equalsIgnoreCase(className)) {
      return new TypeToken<FeaturesAllCategoriesQueryResult>(){}.getType();
    }
    
    if ("FeaturesTextCategoryQueryResult".equalsIgnoreCase(className)) {
      return new TypeToken<FeaturesTextCategoryQueryResult>(){}.getType();
    }
    
    if ("IdList".equalsIgnoreCase(className)) {
      return new TypeToken<IdList>(){}.getType();
    }
    
    if ("MediaObjectDescriptor".equalsIgnoreCase(className)) {
      return new TypeToken<MediaObjectDescriptor>(){}.getType();
    }
    
    if ("MediaObjectMetadataDescriptor".equalsIgnoreCase(className)) {
      return new TypeToken<MediaObjectMetadataDescriptor>(){}.getType();
    }
    
    if ("MediaObjectMetadataQueryResult".equalsIgnoreCase(className)) {
      return new TypeToken<MediaObjectMetadataQueryResult>(){}.getType();
    }
    
    if ("MediaObjectQueryResult".equalsIgnoreCase(className)) {
      return new TypeToken<MediaObjectQueryResult>(){}.getType();
    }
    
    if ("MediaSegmentDescriptor".equalsIgnoreCase(className)) {
      return new TypeToken<MediaSegmentDescriptor>(){}.getType();
    }
    
    if ("MediaSegmentMetadataDescriptor".equalsIgnoreCase(className)) {
      return new TypeToken<MediaSegmentMetadataDescriptor>(){}.getType();
    }
    
    if ("MediaSegmentMetadataQueryResult".equalsIgnoreCase(className)) {
      return new TypeToken<MediaSegmentMetadataQueryResult>(){}.getType();
    }
    
    if ("MediaSegmentQueryResult".equalsIgnoreCase(className)) {
      return new TypeToken<MediaSegmentQueryResult>(){}.getType();
    }
    
    if ("MetadataDomainFilter".equalsIgnoreCase(className)) {
      return new TypeToken<MetadataDomainFilter>(){}.getType();
    }
    
    if ("MetadataKeyFilter".equalsIgnoreCase(className)) {
      return new TypeToken<MetadataKeyFilter>(){}.getType();
    }
    
    if ("OptionallyFilteredIdList".equalsIgnoreCase(className)) {
      return new TypeToken<OptionallyFilteredIdList>(){}.getType();
    }
    
    if ("Ping".equalsIgnoreCase(className)) {
      return new TypeToken<Ping>(){}.getType();
    }
    
    if ("QueryComponent".equalsIgnoreCase(className)) {
      return new TypeToken<QueryComponent>(){}.getType();
    }
    
    if ("QueryConfig".equalsIgnoreCase(className)) {
      return new TypeToken<QueryConfig>(){}.getType();
    }
    
    if ("QueryTerm".equalsIgnoreCase(className)) {
      return new TypeToken<QueryTerm>(){}.getType();
    }
    
    if ("SelectResult".equalsIgnoreCase(className)) {
      return new TypeToken<SelectResult>(){}.getType();
    }
    
    if ("SelectSpecification".equalsIgnoreCase(className)) {
      return new TypeToken<SelectSpecification>(){}.getType();
    }
    
    if ("SessionState".equalsIgnoreCase(className)) {
      return new TypeToken<SessionState>(){}.getType();
    }
    
    if ("SimilarityQuery".equalsIgnoreCase(className)) {
      return new TypeToken<SimilarityQuery>(){}.getType();
    }
    
    if ("SimilarityQueryResult".equalsIgnoreCase(className)) {
      return new TypeToken<SimilarityQueryResult>(){}.getType();
    }
    
    if ("SimilarityQueryResultBatch".equalsIgnoreCase(className)) {
      return new TypeToken<SimilarityQueryResultBatch>(){}.getType();
    }
    
    if ("StartSessionMessage".equalsIgnoreCase(className)) {
      return new TypeToken<StartSessionMessage>(){}.getType();
    }
    
    if ("StringDoublePair".equalsIgnoreCase(className)) {
      return new TypeToken<StringDoublePair>(){}.getType();
    }
    
    if ("Tag".equalsIgnoreCase(className)) {
      return new TypeToken<Tag>(){}.getType();
    }
    
    if ("TagIDsForElementQueryResult".equalsIgnoreCase(className)) {
      return new TypeToken<TagIDsForElementQueryResult>(){}.getType();
    }
    
    if ("TagsQueryResult".equalsIgnoreCase(className)) {
      return new TypeToken<TagsQueryResult>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
